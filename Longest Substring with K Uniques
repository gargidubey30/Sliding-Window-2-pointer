class Solution {
  public:
    int longestKSubstr(string &s, int k) {
        // code here
        int n=s.size();
        map<char,int>mpp;
        int maxlen=-1;
        for(int i=0; i<n; i++){
            mpp.clear();
            for(int j=i; j<n; j++){
                mpp[s[j]]++;
                if(mpp.size() == k){ // exactly k distinct
                    maxlen = max(maxlen, j - i + 1);
                }
                else if(mpp.size() > k){
                    break; // no need to continue
                }
            }
        }
        return maxlen;
    }
};


//better
class Solution {
  public:
    int longestKSubstr(string &s, int k) {
        // code here
        int n=s.size();
        int left=0; 
        int right=0;
        int maxlen=-1;
        map<char,int>mpp;
        
        
        while(right<n){
            mpp[s[right]]++;
            
            while(mpp.size()>k){
                mpp[s[left]]--;
                if(mpp[s[left]]==0)
                mpp.erase(s[left]);
                left++;
            }
            
            if(mpp.size()==k){
                maxlen=max(maxlen,right-left+1);
            }
            
            right++;
        }
        
        return maxlen;
    }
};

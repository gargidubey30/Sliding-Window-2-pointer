class Solution {
public:
    int totalElements(vector<int> &arr) {
        int n = arr.size();
        int maxlen = 0;

        for (int i = 0; i < n; i++) {
            set<int> st;
            for (int j = i; j < n; j++) {
                st.insert(arr[j]);
                
                if (st.size() <= 2) {
                    maxlen = max(maxlen, j - i + 1);
                } else {
                    break;
                }
            }
        }

        return maxlen;
    }
};


// better approach- 2 pointer
class Solution {
public:
    int totalElements(vector<int> &arr) {
        int n = arr.size();
        int left = 0;
        int right = 0;
        int maxlen = 0;
        map<int, int> mpp;
        int k = 2;

        while (right < n) {
            mpp[arr[right]]++;

            if (mpp.size() > k) {
                while (mpp.size() > k) {
                    mpp[arr[left]]--;
                    if (mpp[arr[left]] == 0) mpp.erase(arr[left]);
                    left++; // âœ… moved inside while loop
                }
            }

            if (mpp.size() <= k) {
                maxlen = max(maxlen, right - left + 1);
            }
            right++;
        }
        return maxlen;
    }
};


// optimal approach 
//removed while loop
class Solution {
public:
    int totalElements(vector<int> &arr) {
        int n = arr.size();
        int left = 0;
        int right = 0;
        int maxlen = 0;
        map<int, int> mpp;
        int k = 2;

        while (right < n) {
            mpp[arr[right]]++;

            if (mpp.size() > k) {
               
                    mpp[arr[left]]--;
                    if (mpp[arr[left]] == 0) mpp.erase(arr[left]);
                    left++; 
                
            }

            if (mpp.size() <= k) {
                maxlen = max(maxlen, right - left + 1);
            }
            right++;
        }
        return maxlen;
    }
};

